		           +--------------------------+
			   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Taylor Whittaker
Doug Anjard
Ethan Koch

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

**NOTE, we started with the pintos starter code provided in pub/cis520/pintos2.tgz

			   ARGUMENT PASSING
			   ================
			
			---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	None were added or modified

			---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page? 
   
	Most of argument passing was implemented in the starter code.

	Argument parsing was implemented in the starter code.

	The elements in argv[] are arranged in correct order with the
	reverse function. The reverse function copies all pointers in
	argv[] to a temporary array in reverse order, then all pointers
	are placed back into argv[].

	Avoiding overflowing the stack page was implemented in the
	starter code.

			---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()? 

	   SAVE_PTR is the address of a `char *' variable used to keep
	   track of the tokenizer's position.  The return value each time
	   is the next token in the string, or a null pointer if no
	   tokens remain. -- taken from string.c file
	
	   strtok_r() uses that third argument to keep track of where the 
	   tokenizer is at. This makes its safe for multi-threading. strtok()
	   uses static variables that can be accessed by different threads, thus
	   meaning it is not safe for multi threading. 
	   
	   --multithreading!!

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

	   1. It's more advanced/efficient. With tab-completion, piping and 
	   by being able to redirect files, then the execution of these files
	   are spread out via the PATH variable.
	  
	   2. UNIX also parses the user input for you in the shell. This means 
	   that the kernel does not have to do it, making the kernel more simple
	   and the system more secure. 
	   
	   -- less processing that the kernel has to do. 
	   
			     SYSTEM CALLS
			     ============

			---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

		N/A - all of our structures were implemented for us in starter code
		
		We utilized the file descriptor provided for us
		in the starter code struct to find the files.
		The lock was used so that only one system call 
		could be made to a file at a time.
		

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
		File descriptors are unique within each process. The
		thread has a list of its own file descriptors. 
		This file descriptor struct was implemented for us in the
		starter code and is associated with the open files. 
		
		Each process's thread has its own list of file descriptors.
		
		/* A file descriptor, for binding a file handle to a file. */
		struct file_descriptor
		  {
		    struct list_elem elem;      /* List element. */
		    struct file *file;          /* File. */
		    int handle;                 /* File handle. */
		  };

			---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.




>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

   1. Get current thread, create iterator 
   2. Sort through children list for current thread
   3. if child is a child of current process then
	i. sema_down to make child alive
	ii. return exit_code
   4. if we get through entire loop, return -1

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

			---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

	We iterate through the list of the current thread's children list
	and ensure that we don't return the exit code of the incorrect child thread.
	If the current thread (P) terminates before the child thread can exit, 
	then all of the current thread children's list will be freed as cur exits.
	If wait is called after the child exits, then the current thread won't find 
	the child and will return -1 after iterating. 
	We free all of the resources when the processes exits. 
	

			---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
